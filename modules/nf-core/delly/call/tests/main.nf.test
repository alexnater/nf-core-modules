nextflow_process {

    name "Test Process DELLY_CALL"
    script "../main.nf"
    process "DELLY_CALL"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "delly"
    tag "delly/call"

    test("germline - bcf") {
        when {
            params {
                suffix = 'bcf'
            }
            process {
                """
                input[0] = [
                    [ id:'control' ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
                    [],
                    [],
                    [],
                    [],
                    []
                    ]
                input[1] = [
                    [ id:'human' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta_fai'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert process.out.versions }
            )
        }
    }

    test("germline - vcf") {
        when {
            params {
                suffix = 'vcf'
            }
            
            process {
                """
                input[0] = [
                    [ id:'control' ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
                    [],
                    [],
                    [],
                    [],
                    []
                    ]
                input[1] = [
                    [ id:'human' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta_fai'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert process.out.versions }
            )
        }
    }

    test("germline - genotyping") {
        setup {
            run("DELLY_CALL", alias: "DELLY_PRECALL") {
                script "../main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'control' ], // meta map
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
                        [],
                        [],
                        [],
                        [],
                        []
                        ]
                    input[1] = [
                        [ id:'human' ],
                        file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['genome']['genome_21_fasta_fai'], checkIfExists: true)
                        ]
                    """
                }
            }
        }

        when {
            params {
                suffix = 'bcf'
            }
            process {
                """
                ch_input = Channel.of([
                    [ id:'control' ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true)
                ]).combine(DELLY_PRECALL.out.bcf)
                  .combine(DELLY_PRECALL.out.csi)
                  .map { meta, bam, bai, meta2, bcf, meta3, csi -> [ meta, bam, bai, [], [], bcf, csi, [] ] }
                input[0] = ch_input
                input[1] = [
                    [ id:'human' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta_fai'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert process.out.versions }
            )
        }
    }

    test("germline - stub") {

        options "-stub"

        when {
            params {
                suffix = 'bcf'
            }
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    [],
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                    ]
                input[1] = [
                    [:],
                    [],
                    []
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert process.out.versions }
            )
        }

    }

    test("somatic - bcf") {
        when {
            params {
                suffix = 'bcf'
            }
            process {
                """
                input[0] = [
                    [ id:'tumor_control' ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
                    [],
                    [],
                    []
                    ]
                input[1] = [
                    [ id:'human' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta_fai'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert process.out.versions }
            )
        }
    }

    test("somatic - vcf") {
        when {
            params {
                suffix = 'vcf'
            }
            
            process {
                """
                input[0] = [
                    [ id:'tumor_control' ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test2_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_recalibrated_sorted_bam_bai'], checkIfExists: true),
                    [],
                    [],
                    []
                    ]
                input[1] = [
                    [ id:'human' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta_fai'], checkIfExists: true)
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert process.out.versions }
            )
        }
    }
}
